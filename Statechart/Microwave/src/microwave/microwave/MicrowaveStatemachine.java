/** Generated by YAKINDU Statechart Tools code generator. */
package microwave.microwave;

import microwave.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_Normal,
		microwave_Normal_normal_Puissance,
		microwave_Normal_normal_Puissance_puissance_high,
		microwave_Normal_normal_Puissance_puissance_low,
		microwave_Normal_normal_Temps,
		microwave_Normal_normal_Temps_temps_boutonPresse,
		microwave_Normal_normal_Temps_temps_displayTime,
		microwave_Normal_normal_Cuisson,
		microwave_Normal_normal_Cuisson_cuisson_cuisson,
		microwave_Normal_normal_Cuisson_cuisson_pretacuire,
		microwave_Normal_normal_Finished,
		microwave_Normal_normal_Finished_finished_flashClear,
		microwave_Normal_normal_Finished_finished_flashFinished,
		microwave_Normal_normal_Init,
		microwave_attente,
		$NullState$
	};
	
	private State[] historyVector = new State[5];
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private boolean wasCooking;
	
	protected boolean getWasCooking() {
		return wasCooking;
	}
	
	protected void setWasCooking(boolean value) {
		this.wasCooking = value;
	}
	
	
	private long cookingTime;
	
	protected long getCookingTime() {
		return cookingTime;
	}
	
	protected void setCookingTime(long value) {
		this.cookingTime = value;
	}
	
	
	private long flashingTime;
	
	protected long getFlashingTime() {
		return flashingTime;
	}
	
	protected void setFlashingTime(long value) {
		this.flashingTime = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 5; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setWasCooking(false);
		
		setCookingTime(0);
		
		setFlashingTime(5000);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_Normal_normal_Puissance_puissance_high:
				microwave_Normal_normal_Puissance_puissance_high_react(true);
				break;
			case microwave_Normal_normal_Puissance_puissance_low:
				microwave_Normal_normal_Puissance_puissance_low_react(true);
				break;
			case microwave_Normal_normal_Temps_temps_boutonPresse:
				microwave_Normal_normal_Temps_temps_boutonPresse_react(true);
				break;
			case microwave_Normal_normal_Temps_temps_displayTime:
				microwave_Normal_normal_Temps_temps_displayTime_react(true);
				break;
			case microwave_Normal_normal_Cuisson_cuisson_cuisson:
				microwave_Normal_normal_Cuisson_cuisson_cuisson_react(true);
				break;
			case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
				microwave_Normal_normal_Cuisson_cuisson_pretacuire_react(true);
				break;
			case microwave_Normal_normal_Finished_finished_flashClear:
				microwave_Normal_normal_Finished_finished_flashClear_react(true);
				break;
			case microwave_Normal_normal_Finished_finished_flashFinished:
				microwave_Normal_normal_Finished_finished_flashFinished_react(true);
				break;
			case microwave_Normal_normal_Init:
				microwave_Normal_normal_Init_react(true);
				break;
			case microwave_attente:
				microwave_attente_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_Normal:
			return stateVector[0].ordinal() >= State.
					microwave_Normal.ordinal()&& stateVector[0].ordinal() <= State.microwave_Normal_normal_Init.ordinal();
		case microwave_Normal_normal_Puissance:
			return stateVector[0].ordinal() >= State.
					microwave_Normal_normal_Puissance.ordinal()&& stateVector[0].ordinal() <= State.microwave_Normal_normal_Puissance_puissance_low.ordinal();
		case microwave_Normal_normal_Puissance_puissance_high:
			return stateVector[0] == State.microwave_Normal_normal_Puissance_puissance_high;
		case microwave_Normal_normal_Puissance_puissance_low:
			return stateVector[0] == State.microwave_Normal_normal_Puissance_puissance_low;
		case microwave_Normal_normal_Temps:
			return stateVector[0].ordinal() >= State.
					microwave_Normal_normal_Temps.ordinal()&& stateVector[0].ordinal() <= State.microwave_Normal_normal_Temps_temps_displayTime.ordinal();
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			return stateVector[0] == State.microwave_Normal_normal_Temps_temps_boutonPresse;
		case microwave_Normal_normal_Temps_temps_displayTime:
			return stateVector[0] == State.microwave_Normal_normal_Temps_temps_displayTime;
		case microwave_Normal_normal_Cuisson:
			return stateVector[0].ordinal() >= State.
					microwave_Normal_normal_Cuisson.ordinal()&& stateVector[0].ordinal() <= State.microwave_Normal_normal_Cuisson_cuisson_pretacuire.ordinal();
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			return stateVector[0] == State.microwave_Normal_normal_Cuisson_cuisson_cuisson;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			return stateVector[0] == State.microwave_Normal_normal_Cuisson_cuisson_pretacuire;
		case microwave_Normal_normal_Finished:
			return stateVector[0].ordinal() >= State.
					microwave_Normal_normal_Finished.ordinal()&& stateVector[0].ordinal() <= State.microwave_Normal_normal_Finished_finished_flashFinished.ordinal();
		case microwave_Normal_normal_Finished_finished_flashClear:
			return stateVector[0] == State.microwave_Normal_normal_Finished_finished_flashClear;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			return stateVector[0] == State.microwave_Normal_normal_Finished_finished_flashFinished;
		case microwave_Normal_normal_Init:
			return stateVector[0] == State.microwave_Normal_normal_Init;
		case microwave_attente:
			return stateVector[0] == State.microwave_attente;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	private boolean check_Microwave_Normal_normal__choice_0_tr1_tr1() {
		return getWasCooking()==true;
	}
	
	private void effect_Microwave_Normal_normal__choice_0_tr1() {
		enterSequence_Microwave_Normal_normal_Cuisson_default();
	}
	
	private void effect_Microwave_Normal_normal__choice_0_tr0() {
		react_Microwave_Normal_normal__entry_Default();
	}
	
	/* Entry action for state 'high'. */
	private void entryAction_Microwave_Normal_normal_Puissance_puissance_high() {
		sCInterface.operationCallback.display("High");
		
		sCInterface.setPower(1);
	}
	
	/* Entry action for state 'low'. */
	private void entryAction_Microwave_Normal_normal_Puissance_puissance_low() {
		sCInterface.operationCallback.display("Low");
		
		sCInterface.setPower(2);
	}
	
	/* Entry action for state 'boutonPresse'. */
	private void entryAction_Microwave_Normal_normal_Temps_temps_boutonPresse() {
		timer.setTimer(this, 0, 1, false);
		
		setCookingTime(((cookingTime * 10) + sCInterface.getDigitValue()));
	}
	
	/* Entry action for state 'displayTime'. */
	private void entryAction_Microwave_Normal_normal_Temps_temps_displayTime() {
		sCInterface.operationCallback.displayTime(getCookingTime());
	}
	
	/* Entry action for state 'Cuisson'. */
	private void entryAction_Microwave_Normal_normal_Cuisson() {
		setWasCooking(true);
		
		sCInterface.operationCallback.cook();
	}
	
	/* Entry action for state 'cuisson'. */
	private void entryAction_Microwave_Normal_normal_Cuisson_cuisson_cuisson() {
		timer.setTimer(this, 1, (1 * 1000), false);
		
		sCInterface.operationCallback.displayTime(getCookingTime());
		
		getCookingTime()--;
	}
	
	/* Entry action for state 'pretacuire'. */
	private void entryAction_Microwave_Normal_normal_Cuisson_cuisson_pretacuire() {
		sCInterface.operationCallback.stopCook();
	}
	
	/* Entry action for state 'Finished'. */
	private void entryAction_Microwave_Normal_normal_Finished() {
		setWasCooking(false);
	}
	
	/* Entry action for state 'flashClear'. */
	private void entryAction_Microwave_Normal_normal_Finished_finished_flashClear() {
		timer.setTimer(this, 2, 500, false);
		
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'flashFinished'. */
	private void entryAction_Microwave_Normal_normal_Finished_finished_flashFinished() {
		timer.setTimer(this, 3, 500, false);
		
		sCInterface.operationCallback.display("Finished");
		
		sCInterface.operationCallback.beepOn();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Normal_normal_Init() {
		sCInterface.operationCallback.clearDisplay();
		
		sCInterface.operationCallback.closeDoor();
		
		setWasCooking(false);
		
		setCookingTime(0);
		
		setFlashingTime(5000);
	}
	
	/* Entry action for state 'attente'. */
	private void entryAction_Microwave_attente() {
		sCInterface.operationCallback.openDoor();
		
		sCInterface.operationCallback.display("Waiting");
	}
	
	/* Exit action for state 'boutonPresse'. */
	private void exitAction_Microwave_Normal_normal_Temps_temps_boutonPresse() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Cuisson'. */
	private void exitAction_Microwave_Normal_normal_Cuisson() {
		sCInterface.operationCallback.stopCook();
	}
	
	/* Exit action for state 'cuisson'. */
	private void exitAction_Microwave_Normal_normal_Cuisson_cuisson_cuisson() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'pretacuire'. */
	private void exitAction_Microwave_Normal_normal_Cuisson_cuisson_pretacuire() {
		sCInterface.operationCallback.cook();
	}
	
	/* Exit action for state 'flashClear'. */
	private void exitAction_Microwave_Normal_normal_Finished_finished_flashClear() {
		timer.unsetTimer(this, 2);
		
		setFlashingTime(getFlashingTime() - 500);
	}
	
	/* Exit action for state 'flashFinished'. */
	private void exitAction_Microwave_Normal_normal_Finished_finished_flashFinished() {
		timer.unsetTimer(this, 3);
		
		sCInterface.operationCallback.beepOff();
		
		setFlashingTime(getFlashingTime() - 500);
	}
	
	/* Exit action for state 'attente'. */
	private void exitAction_Microwave_attente() {
		sCInterface.operationCallback.closeDoor();
	}
	
	/* 'default' enter sequence for state Normal */
	private void enterSequence_Microwave_Normal_default() {
		enterSequence_Microwave_Normal_normal_default();
	}
	
	/* 'default' enter sequence for state high */
	private void enterSequence_Microwave_Normal_normal_Puissance_puissance_high_default() {
		entryAction_Microwave_Normal_normal_Puissance_puissance_high();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Puissance_puissance_high;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state low */
	private void enterSequence_Microwave_Normal_normal_Puissance_puissance_low_default() {
		entryAction_Microwave_Normal_normal_Puissance_puissance_low();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Puissance_puissance_low;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Temps */
	private void enterSequence_Microwave_Normal_normal_Temps_default() {
		enterSequence_Microwave_Normal_normal_Temps_temps_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state boutonPresse */
	private void enterSequence_Microwave_Normal_normal_Temps_temps_boutonPresse_default() {
		entryAction_Microwave_Normal_normal_Temps_temps_boutonPresse();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Temps_temps_boutonPresse;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state displayTime */
	private void enterSequence_Microwave_Normal_normal_Temps_temps_displayTime_default() {
		entryAction_Microwave_Normal_normal_Temps_temps_displayTime();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Temps_temps_displayTime;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Cuisson */
	private void enterSequence_Microwave_Normal_normal_Cuisson_default() {
		entryAction_Microwave_Normal_normal_Cuisson();
		enterSequence_Microwave_Normal_normal_Cuisson_cuisson_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state cuisson */
	private void enterSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson_default() {
		entryAction_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Cuisson_cuisson_cuisson;
		
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state pretacuire */
	private void enterSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire_default() {
		entryAction_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Cuisson_cuisson_pretacuire;
		
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Finished */
	private void enterSequence_Microwave_Normal_normal_Finished_default() {
		entryAction_Microwave_Normal_normal_Finished();
		enterSequence_Microwave_Normal_normal_Finished_finished_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state flashClear */
	private void enterSequence_Microwave_Normal_normal_Finished_finished_flashClear_default() {
		entryAction_Microwave_Normal_normal_Finished_finished_flashClear();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Finished_finished_flashClear;
		
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state flashFinished */
	private void enterSequence_Microwave_Normal_normal_Finished_finished_flashFinished_default() {
		entryAction_Microwave_Normal_normal_Finished_finished_flashFinished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Finished_finished_flashFinished;
		
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Normal_normal_Init_default() {
		entryAction_Microwave_Normal_normal_Init();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Normal_normal_Init;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state attente */
	private void enterSequence_Microwave_attente_default() {
		entryAction_Microwave_attente();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_attente;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region normal */
	private void enterSequence_Microwave_Normal_normal_default() {
		react_Microwave_Normal_normal__entry_Default();
	}
	
	/* deep enterSequence with history in child normal */
	private void deepEnterSequence_Microwave_Normal_normal() {
		switch (historyVector[0]) {
		case microwave_Normal_normal_Puissance_puissance_high:
			deepEnterSequence_Microwave_Normal_normal_Puissance_puissance();
			break;
		case microwave_Normal_normal_Puissance_puissance_low:
			deepEnterSequence_Microwave_Normal_normal_Puissance_puissance();
			break;
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			deepEnterSequence_Microwave_Normal_normal_Temps_temps();
			break;
		case microwave_Normal_normal_Temps_temps_displayTime:
			deepEnterSequence_Microwave_Normal_normal_Temps_temps();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			entryAction_Microwave_Normal_normal_Cuisson();
			deepEnterSequence_Microwave_Normal_normal_Cuisson_cuisson();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			entryAction_Microwave_Normal_normal_Cuisson();
			deepEnterSequence_Microwave_Normal_normal_Cuisson_cuisson();
			break;
		case microwave_Normal_normal_Finished_finished_flashClear:
			entryAction_Microwave_Normal_normal_Finished();
			deepEnterSequence_Microwave_Normal_normal_Finished_finished();
			break;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			entryAction_Microwave_Normal_normal_Finished();
			deepEnterSequence_Microwave_Normal_normal_Finished_finished();
			break;
		case microwave_Normal_normal_Init:
			enterSequence_Microwave_Normal_normal_Init_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region puissance */
	private void enterSequence_Microwave_Normal_normal_Puissance_puissance_default() {
		react_Microwave_Normal_normal_Puissance_puissance__entry_Default();
	}
	
	/* deep enterSequence with history in child puissance */
	private void deepEnterSequence_Microwave_Normal_normal_Puissance_puissance() {
		switch (historyVector[1]) {
		case microwave_Normal_normal_Puissance_puissance_high:
			enterSequence_Microwave_Normal_normal_Puissance_puissance_high_default();
			break;
		case microwave_Normal_normal_Puissance_puissance_low:
			enterSequence_Microwave_Normal_normal_Puissance_puissance_low_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region temps */
	private void enterSequence_Microwave_Normal_normal_Temps_temps_default() {
		react_Microwave_Normal_normal_Temps_temps__entry_Default();
	}
	
	/* deep enterSequence with history in child temps */
	private void deepEnterSequence_Microwave_Normal_normal_Temps_temps() {
		switch (historyVector[2]) {
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			enterSequence_Microwave_Normal_normal_Temps_temps_boutonPresse_default();
			break;
		case microwave_Normal_normal_Temps_temps_displayTime:
			enterSequence_Microwave_Normal_normal_Temps_temps_displayTime_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region cuisson */
	private void enterSequence_Microwave_Normal_normal_Cuisson_cuisson_default() {
		react_Microwave_Normal_normal_Cuisson_cuisson__entry_Default();
	}
	
	/* deep enterSequence with history in child cuisson */
	private void deepEnterSequence_Microwave_Normal_normal_Cuisson_cuisson() {
		switch (historyVector[3]) {
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			enterSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson_default();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			enterSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region finished */
	private void enterSequence_Microwave_Normal_normal_Finished_finished_default() {
		react_Microwave_Normal_normal_Finished_finished__entry_Default();
	}
	
	/* deep enterSequence with history in child finished */
	private void deepEnterSequence_Microwave_Normal_normal_Finished_finished() {
		switch (historyVector[4]) {
		case microwave_Normal_normal_Finished_finished_flashClear:
			enterSequence_Microwave_Normal_normal_Finished_finished_flashClear_default();
			break;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			enterSequence_Microwave_Normal_normal_Finished_finished_flashFinished_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Normal */
	private void exitSequence_Microwave_Normal() {
		exitSequence_Microwave_Normal_normal();
	}
	
	/* Default exit sequence for state Puissance */
	private void exitSequence_Microwave_Normal_normal_Puissance() {
		exitSequence_Microwave_Normal_normal_Puissance_puissance();
	}
	
	/* Default exit sequence for state high */
	private void exitSequence_Microwave_Normal_normal_Puissance_puissance_high() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state low */
	private void exitSequence_Microwave_Normal_normal_Puissance_puissance_low() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Temps */
	private void exitSequence_Microwave_Normal_normal_Temps() {
		exitSequence_Microwave_Normal_normal_Temps_temps();
	}
	
	/* Default exit sequence for state boutonPresse */
	private void exitSequence_Microwave_Normal_normal_Temps_temps_boutonPresse() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Normal_normal_Temps_temps_boutonPresse();
	}
	
	/* Default exit sequence for state displayTime */
	private void exitSequence_Microwave_Normal_normal_Temps_temps_displayTime() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cuisson */
	private void exitSequence_Microwave_Normal_normal_Cuisson() {
		exitSequence_Microwave_Normal_normal_Cuisson_cuisson();
		exitAction_Microwave_Normal_normal_Cuisson();
	}
	
	/* Default exit sequence for state cuisson */
	private void exitSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
	}
	
	/* Default exit sequence for state pretacuire */
	private void exitSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
	}
	
	/* Default exit sequence for state Finished */
	private void exitSequence_Microwave_Normal_normal_Finished() {
		exitSequence_Microwave_Normal_normal_Finished_finished();
	}
	
	/* Default exit sequence for state flashClear */
	private void exitSequence_Microwave_Normal_normal_Finished_finished_flashClear() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Normal_normal_Finished_finished_flashClear();
	}
	
	/* Default exit sequence for state flashFinished */
	private void exitSequence_Microwave_Normal_normal_Finished_finished_flashFinished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Normal_normal_Finished_finished_flashFinished();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Normal_normal_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state attente */
	private void exitSequence_Microwave_attente() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_attente();
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Puissance_puissance_high:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_high();
			break;
		case microwave_Normal_normal_Puissance_puissance_low:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_low();
			break;
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			exitSequence_Microwave_Normal_normal_Temps_temps_boutonPresse();
			break;
		case microwave_Normal_normal_Temps_temps_displayTime:
			exitSequence_Microwave_Normal_normal_Temps_temps_displayTime();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
			exitAction_Microwave_Normal_normal_Cuisson();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
			exitAction_Microwave_Normal_normal_Cuisson();
			break;
		case microwave_Normal_normal_Finished_finished_flashClear:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashClear();
			break;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashFinished();
			break;
		case microwave_Normal_normal_Init:
			exitSequence_Microwave_Normal_normal_Init();
			break;
		case microwave_attente:
			exitSequence_Microwave_attente();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region normal */
	private void exitSequence_Microwave_Normal_normal() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Puissance_puissance_high:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_high();
			break;
		case microwave_Normal_normal_Puissance_puissance_low:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_low();
			break;
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			exitSequence_Microwave_Normal_normal_Temps_temps_boutonPresse();
			break;
		case microwave_Normal_normal_Temps_temps_displayTime:
			exitSequence_Microwave_Normal_normal_Temps_temps_displayTime();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
			exitAction_Microwave_Normal_normal_Cuisson();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
			exitAction_Microwave_Normal_normal_Cuisson();
			break;
		case microwave_Normal_normal_Finished_finished_flashClear:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashClear();
			break;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashFinished();
			break;
		case microwave_Normal_normal_Init:
			exitSequence_Microwave_Normal_normal_Init();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region puissance */
	private void exitSequence_Microwave_Normal_normal_Puissance_puissance() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Puissance_puissance_high:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_high();
			break;
		case microwave_Normal_normal_Puissance_puissance_low:
			exitSequence_Microwave_Normal_normal_Puissance_puissance_low();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region temps */
	private void exitSequence_Microwave_Normal_normal_Temps_temps() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Temps_temps_boutonPresse:
			exitSequence_Microwave_Normal_normal_Temps_temps_boutonPresse();
			break;
		case microwave_Normal_normal_Temps_temps_displayTime:
			exitSequence_Microwave_Normal_normal_Temps_temps_displayTime();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region cuisson */
	private void exitSequence_Microwave_Normal_normal_Cuisson_cuisson() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Cuisson_cuisson_cuisson:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
			break;
		case microwave_Normal_normal_Cuisson_cuisson_pretacuire:
			exitSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region finished */
	private void exitSequence_Microwave_Normal_normal_Finished_finished() {
		switch (stateVector[0]) {
		case microwave_Normal_normal_Finished_finished_flashClear:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashClear();
			break;
		case microwave_Normal_normal_Finished_finished_flashFinished:
			exitSequence_Microwave_Normal_normal_Finished_finished_flashFinished();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Normal_normal__choice_0() {
		if (check_Microwave_Normal_normal__choice_0_tr1_tr1()) {
			effect_Microwave_Normal_normal__choice_0_tr1();
		} else {
			effect_Microwave_Normal_normal__choice_0_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Normal_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Normal_normal_Puissance_puissance__entry_Default() {
		enterSequence_Microwave_Normal_normal_Puissance_puissance_high_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Normal_normal_Temps_temps__entry_Default() {
		enterSequence_Microwave_Normal_normal_Temps_temps_displayTime_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Normal_normal_Cuisson_cuisson__entry_Default() {
		enterSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Normal_normal_Finished_finished__entry_Default() {
		enterSequence_Microwave_Normal_normal_Finished_finished_flashFinished_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_Microwave_Normal_normal__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NullState$) {
			deepEnterSequence_Microwave_Normal_normal();
		} else {
			enterSequence_Microwave_Normal_normal_Init_default();
		}
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_Normal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_Normal();
					enterSequence_Microwave_attente_default();
				} else {
					if (sCInterface.stop) {
						exitSequence_Microwave_Normal();
						enterSequence_Microwave_Normal_normal_Init_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Puissance_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_react(try_transition)==false) {
				if (sCInterface.timer) {
					exitSequence_Microwave_Normal_normal_Puissance();
					enterSequence_Microwave_Normal_normal_Temps_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Puissance_puissance_high_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Puissance_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_Normal_normal_Puissance_puissance_high();
					enterSequence_Microwave_Normal_normal_Puissance_puissance_low_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Puissance_puissance_low_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Puissance_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Normal_normal_Puissance_puissance_low();
					enterSequence_Microwave_Normal_normal_Puissance_puissance_high_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Temps_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_react(try_transition)==false) {
				if (((sCInterface.start) && (getCookingTime()>0))) {
					exitSequence_Microwave_Normal_normal_Temps();
					entryAction_Microwave_Normal_normal_Cuisson();
					enterSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson_default();
					historyVector[0] = stateVector[0];
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Temps_temps_boutonPresse_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Temps_react(try_transition)==false) {
				if (timeEvents[0]) {
					exitSequence_Microwave_Normal_normal_Temps_temps_boutonPresse();
					enterSequence_Microwave_Normal_normal_Temps_temps_displayTime_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Temps_temps_displayTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Temps_react(try_transition)==false) {
				if (((sCInterface.digit) && (getCookingTime()<1000))) {
					exitSequence_Microwave_Normal_normal_Temps_temps_displayTime();
					enterSequence_Microwave_Normal_normal_Temps_temps_boutonPresse_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Cuisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_react(try_transition)==false) {
				if (getCookingTime()==0) {
					exitSequence_Microwave_Normal_normal_Cuisson();
					enterSequence_Microwave_Normal_normal_Finished_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Cuisson_cuisson_cuisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Cuisson_react(try_transition)==false) {
				if (timeEvents[1]) {
					exitSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson();
					enterSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Cuisson_cuisson_pretacuire_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Cuisson_react(try_transition)==false) {
				if (sCInterface.start) {
					exitSequence_Microwave_Normal_normal_Cuisson_cuisson_pretacuire();
					enterSequence_Microwave_Normal_normal_Cuisson_cuisson_cuisson_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Finished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_react(try_transition)==false) {
				if (getFlashingTime()==0) {
					exitSequence_Microwave_Normal_normal_Finished();
					enterSequence_Microwave_Normal_normal_Init_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Finished_finished_flashClear_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Finished_react(try_transition)==false) {
				if (timeEvents[2]) {
					exitSequence_Microwave_Normal_normal_Finished_finished_flashClear();
					enterSequence_Microwave_Normal_normal_Finished_finished_flashFinished_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Finished_finished_flashFinished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_normal_Finished_react(try_transition)==false) {
				if (timeEvents[3]) {
					exitSequence_Microwave_Normal_normal_Finished_finished_flashFinished();
					enterSequence_Microwave_Normal_normal_Finished_finished_flashClear_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Normal_normal_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Normal_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Normal_normal_Init();
					enterSequence_Microwave_Normal_normal_Puissance_puissance_high_default();
					historyVector[0] = stateVector[0];
				} else {
					if (sCInterface.low) {
						exitSequence_Microwave_Normal_normal_Init();
						enterSequence_Microwave_Normal_normal_Puissance_puissance_low_default();
						historyVector[0] = stateVector[0];
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_attente_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_attente();
					react_Microwave_Normal_normal__choice_0();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
